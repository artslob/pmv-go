// Code generated from Lang.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 22, 150,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3,
	8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3,
	21, 3, 21, 3, 22, 6, 22, 126, 10, 22, 13, 22, 14, 22, 127, 3, 22, 3, 22,
	3, 23, 3, 23, 3, 23, 5, 23, 135, 10, 23, 3, 23, 3, 23, 3, 23, 3, 23, 7,
	23, 141, 10, 23, 12, 23, 14, 23, 144, 11, 23, 3, 24, 6, 24, 147, 10, 24,
	13, 24, 14, 24, 148, 2, 2, 25, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15,
	9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33,
	18, 35, 19, 37, 2, 39, 2, 41, 2, 43, 20, 45, 21, 47, 22, 3, 2, 6, 3, 2,
	99, 124, 3, 2, 67, 92, 3, 2, 50, 59, 5, 2, 11, 12, 15, 15, 34, 34, 2, 154,
	2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2,
	2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2,
	2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2,
	2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3,
	2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 47,
	3, 2, 2, 2, 3, 49, 3, 2, 2, 2, 5, 53, 3, 2, 2, 2, 7, 57, 3, 2, 2, 2, 9,
	59, 3, 2, 2, 2, 11, 61, 3, 2, 2, 2, 13, 63, 3, 2, 2, 2, 15, 66, 3, 2, 2,
	2, 17, 72, 3, 2, 2, 2, 19, 74, 3, 2, 2, 2, 21, 76, 3, 2, 2, 2, 23, 81,
	3, 2, 2, 2, 25, 86, 3, 2, 2, 2, 27, 90, 3, 2, 2, 2, 29, 95, 3, 2, 2, 2,
	31, 100, 3, 2, 2, 2, 33, 106, 3, 2, 2, 2, 35, 111, 3, 2, 2, 2, 37, 118,
	3, 2, 2, 2, 39, 120, 3, 2, 2, 2, 41, 122, 3, 2, 2, 2, 43, 125, 3, 2, 2,
	2, 45, 134, 3, 2, 2, 2, 47, 146, 3, 2, 2, 2, 49, 50, 7, 102, 2, 2, 50,
	51, 7, 103, 2, 2, 51, 52, 7, 104, 2, 2, 52, 4, 3, 2, 2, 2, 53, 54, 7, 103,
	2, 2, 54, 55, 7, 112, 2, 2, 55, 56, 7, 102, 2, 2, 56, 6, 3, 2, 2, 2, 57,
	58, 7, 42, 2, 2, 58, 8, 3, 2, 2, 2, 59, 60, 7, 46, 2, 2, 60, 10, 3, 2,
	2, 2, 61, 62, 7, 43, 2, 2, 62, 12, 3, 2, 2, 2, 63, 64, 7, 113, 2, 2, 64,
	65, 7, 104, 2, 2, 65, 14, 3, 2, 2, 2, 66, 67, 7, 99, 2, 2, 67, 68, 7, 116,
	2, 2, 68, 69, 7, 116, 2, 2, 69, 70, 7, 99, 2, 2, 70, 71, 7, 123, 2, 2,
	71, 16, 3, 2, 2, 2, 72, 73, 7, 93, 2, 2, 73, 18, 3, 2, 2, 2, 74, 75, 7,
	95, 2, 2, 75, 20, 3, 2, 2, 2, 76, 77, 7, 100, 2, 2, 77, 78, 7, 113, 2,
	2, 78, 79, 7, 113, 2, 2, 79, 80, 7, 110, 2, 2, 80, 22, 3, 2, 2, 2, 81,
	82, 7, 100, 2, 2, 82, 83, 7, 123, 2, 2, 83, 84, 7, 118, 2, 2, 84, 85, 7,
	103, 2, 2, 85, 24, 3, 2, 2, 2, 86, 87, 7, 107, 2, 2, 87, 88, 7, 112, 2,
	2, 88, 89, 7, 118, 2, 2, 89, 26, 3, 2, 2, 2, 90, 91, 7, 119, 2, 2, 91,
	92, 7, 107, 2, 2, 92, 93, 7, 112, 2, 2, 93, 94, 7, 118, 2, 2, 94, 28, 3,
	2, 2, 2, 95, 96, 7, 110, 2, 2, 96, 97, 7, 113, 2, 2, 97, 98, 7, 112, 2,
	2, 98, 99, 7, 105, 2, 2, 99, 30, 3, 2, 2, 2, 100, 101, 7, 119, 2, 2, 101,
	102, 7, 110, 2, 2, 102, 103, 7, 113, 2, 2, 103, 104, 7, 112, 2, 2, 104,
	105, 7, 105, 2, 2, 105, 32, 3, 2, 2, 2, 106, 107, 7, 101, 2, 2, 107, 108,
	7, 106, 2, 2, 108, 109, 7, 99, 2, 2, 109, 110, 7, 116, 2, 2, 110, 34, 3,
	2, 2, 2, 111, 112, 7, 117, 2, 2, 112, 113, 7, 118, 2, 2, 113, 114, 7, 116,
	2, 2, 114, 115, 7, 107, 2, 2, 115, 116, 7, 112, 2, 2, 116, 117, 7, 105,
	2, 2, 117, 36, 3, 2, 2, 2, 118, 119, 9, 2, 2, 2, 119, 38, 3, 2, 2, 2, 120,
	121, 9, 3, 2, 2, 121, 40, 3, 2, 2, 2, 122, 123, 9, 4, 2, 2, 123, 42, 3,
	2, 2, 2, 124, 126, 9, 5, 2, 2, 125, 124, 3, 2, 2, 2, 126, 127, 3, 2, 2,
	2, 127, 125, 3, 2, 2, 2, 127, 128, 3, 2, 2, 2, 128, 129, 3, 2, 2, 2, 129,
	130, 8, 22, 2, 2, 130, 44, 3, 2, 2, 2, 131, 135, 5, 37, 19, 2, 132, 135,
	5, 39, 20, 2, 133, 135, 7, 97, 2, 2, 134, 131, 3, 2, 2, 2, 134, 132, 3,
	2, 2, 2, 134, 133, 3, 2, 2, 2, 135, 142, 3, 2, 2, 2, 136, 141, 5, 37, 19,
	2, 137, 141, 5, 39, 20, 2, 138, 141, 7, 97, 2, 2, 139, 141, 5, 41, 21,
	2, 140, 136, 3, 2, 2, 2, 140, 137, 3, 2, 2, 2, 140, 138, 3, 2, 2, 2, 140,
	139, 3, 2, 2, 2, 141, 144, 3, 2, 2, 2, 142, 140, 3, 2, 2, 2, 142, 143,
	3, 2, 2, 2, 143, 46, 3, 2, 2, 2, 144, 142, 3, 2, 2, 2, 145, 147, 5, 41,
	21, 2, 146, 145, 3, 2, 2, 2, 147, 148, 3, 2, 2, 2, 148, 146, 3, 2, 2, 2,
	148, 149, 3, 2, 2, 2, 149, 48, 3, 2, 2, 2, 8, 2, 127, 134, 140, 142, 148,
	3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'def'", "'end'", "'('", "','", "')'", "'of'", "'array'", "'['", "']'",
	"'bool'", "'byte'", "'int'", "'uint'", "'long'", "'ulong'", "'char'", "'string'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"EMPTY", "IDENTIFIER", "DEC",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
	"LOWERCASE", "UPPERCASE", "DIGIT", "EMPTY", "IDENTIFIER", "DEC",
}

type LangLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewLangLexer(input antlr.CharStream) *LangLexer {

	l := new(LangLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Lang.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// LangLexer tokens.
const (
	LangLexerT__0       = 1
	LangLexerT__1       = 2
	LangLexerT__2       = 3
	LangLexerT__3       = 4
	LangLexerT__4       = 5
	LangLexerT__5       = 6
	LangLexerT__6       = 7
	LangLexerT__7       = 8
	LangLexerT__8       = 9
	LangLexerT__9       = 10
	LangLexerT__10      = 11
	LangLexerT__11      = 12
	LangLexerT__12      = 13
	LangLexerT__13      = 14
	LangLexerT__14      = 15
	LangLexerT__15      = 16
	LangLexerT__16      = 17
	LangLexerEMPTY      = 18
	LangLexerIDENTIFIER = 19
	LangLexerDEC        = 20
)
